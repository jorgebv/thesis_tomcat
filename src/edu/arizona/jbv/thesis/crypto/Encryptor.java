package edu.arizona.jbv.thesis.crypto;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * The encryptor abstract class defines a few methods so that encryption can be
 * handled with just a few methods regardless of algorithm chosen.
 * 
 * @author Jorge Vergara
 * 
 */
public abstract class Encryptor {

	/**
	 * The encrypt method should take plain java objects and return the
	 * encrypted form. The encrypted form is up to the specific implementation.
	 * Generally, it does not matter what the form is, as the data is useless
	 * until it is decrypted.
	 * 
	 * @param o
	 *            A plain Java object to be encrypted
	 * @return The encrypted form of the object
	 */
	public abstract Object encrypt(Object o);

	/**
	 * This method will take the encrypted form generated by the encrypt method
	 * and return a byte array that represents the orginal data. The byte array
	 * can be returned to the original object using the other methods provided
	 * in this class.
	 * 
	 * @param o
	 *            The object to decrypt
	 * @return A byte array representing the object that was passed into the
	 *         encrypt method.
	 */
	public abstract byte[] decrypt(Object o);

	/**
	 * Utility method for turning objects into byte arrays
	 * 
	 * @param o
	 *            The object to be serialized into a byte array (must be
	 *            serializable). The parameter types should be refactored to be
	 *            serializable instead of object in a future version
	 * @return The byte array serialization of the object
	 * @throws IOException
	 */
	public byte[] objectToByte(Object o) throws IOException {
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		ObjectOutputStream oos = new ObjectOutputStream(bos);
		oos.writeObject(o);
		byte[] message = bos.toByteArray();
		bos.close();
		oos.close();
		return message;
	}

	/**
	 * Utility method for turning byte arrays back into objects
	 * 
	 * @param data
	 *            The byte array the is a Java object
	 * @return The object that was serialized into a byte array
	 * @throws ClassNotFoundException
	 * @throws IOException
	 */
	public Object byteToObject(byte[] data) throws ClassNotFoundException,
			IOException {
		ObjectInputStream writer = new ObjectInputStream(
				new ByteArrayInputStream(data));
		return writer.readObject();
	}

}
